[tool.poetry]
name = "freenub"
version = "0.1.0"
description = "This is a fork of pubnub when it still had an MIT license"
authors = ["J. Nick Koston <nick@koston.org>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/bdraco/freenub"
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Intended Audience :: Developers',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3.7',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: Implementation :: CPython',
    'License :: OSI Approved :: MIT License',
    'Operating System :: OS Independent',
    'Topic :: Internet :: WWW/HTTP',
    'Topic :: Software Development :: Libraries :: Python Modules',
]
packages = [
    { include = "pubnub" },
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/bdraco/freenub/issues"
"Changelog" = "https://github.com/bdraco/freenub/blob/main/CHANGELOG.md"

[tool.poetry.dependencies]
python = "^3.8"
pycryptodomex = ">=3.3"
requests = ">=2.4"
cbor2 = "^5.6.4"
aiohttp = "^3.9.5"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-cov = "^5.0.0"
pyyaml = "^6.0.1"
pytest-asyncio = "^0.23.7"
behave = "^1.2.6"
vcrpy = "^6.0.1"
urllib3 = "<2"
busypie = "^0.5.1"

[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version"]
version_variables = [
    "pubnub/__init__.py:__version__",
]
build_command = "pip install poetry && poetry build"

[tool.semantic_release.changelog]
exclude_commit_patterns = [
    "chore*",
    "ci*",
]

[tool.semantic_release.changelog.environment]
keep_trailing_newline = true

[tool.semantic_release.branches.main]
match = "main"

[tool.semantic_release.branches.noop]
match = "(?!main$)"
prerelease = true

[tool.pytest.ini_options]
addopts = """\
    -v
    -Wdefault
    --cov=pubnub
    --cov-report=term
    --cov-report=xml
    """

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@overload",
    "if TYPE_CHECKING",
    "raise NotImplementedError",
    'if __name__ == "__main__":',
]

[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
ignore = [
    "D203", # 1 blank line required before class docstring
    "D212", # Multi-line docstring summary should start at the first line
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D107", # Missing docstring in `__init__`
    "D401", # First line of docstring should be in imperative mood
    "C414",
    "C413",
]
select = [
    "I",   # isort
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "S101",
]
"setup.py" = ["D100"]
"conftest.py" = ["D100"]

[tool.ruff.lint.isort]
known-first-party = ["pubnub", "tests"]

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
mypy_path = "src/"
no_implicit_optional = true
show_error_codes = true
warn_unreachable = true
warn_unused_ignores = true
exclude = [
    'setup.py',
]

[[tool.mypy.overrides]]
module = "tests.*"
allow_untyped_defs = true

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
